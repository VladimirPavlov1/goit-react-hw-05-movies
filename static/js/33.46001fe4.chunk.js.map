{"version":3,"file":"static/js/33.46001fe4.chunk.js","mappings":"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","sources":["apiServises.js","components/Cast/Cast.jsx","components/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.js","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getTrend = () => {\n    return axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n};\n\nexport const getMovieDetails = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n};\n\nexport const getMovieByName = movieName => {\n    return axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n};\n\nexport const getCast = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n};\n\nexport const getReviews = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'apiServises';\nimport photo_not from '../../image/user_not_found.jpg';\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        if (movieId !== null) {\n            getCast(movieId).then(data => {\n                setItems(items => [...getCleanItems(data.data.cast)]);\n            });\n        }\n    }, [movieId]);\n\n    const getUserPhoto = userPhoto => {\n        let photo = photo_not;\n        items.map(({ profile_path }) => {\n            if (profile_path !== null && profile_path === userPhoto) {\n                photo = `https://image.tmdb.org/t/p/original${profile_path}`;\n            }\n            return photo;\n        });\n        return photo;\n    };\n\n    const getCleanItems = array => {\n        return array.filter(({ id }) => id.includes(id));\n    };\n\n    return (\n        <ul>\n            {items &&\n                items.map(({ character, id, original_name, profile_path }) => {\n                    return (\n                        <li key={[character, id]}>\n                            <img\n                                src={getUserPhoto(profile_path)}\n                                alt=\"jdghh\"\n                                width=\"100px\"\n                            />\n                            <h3>{original_name}</h3>\n                            <h3>{character}</h3>\n                        </li>\n                    );\n                })}\n        </ul>\n    );\n};\n\nexport default Cast;\n","import { getReviews } from 'apiServises';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\n\nconst Reviews = () => {\n    const { movieId } = useParams();\n\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        if (movieId === null) {\n            return;\n        }\n        getReviews(movieId).then(data =>\n            setItems(items => [...items, ...data.data.results])\n        );\n    }, [movieId]);\n\n    return (\n        <div>\n            <ul>\n                {items.length > 0 ? (\n                    items.map(item => {\n                        return (\n                            <li key={item.id}>\n                                <h3>Author:{item.author}</h3>\n                                <p>{item.content}</p>\n                            </li>\n                        );\n                    })\n                ) : (\n                    <h3>Not reviews</h3>\n                )}\n            </ul>\n        </div>\n    );\n};\n\nexport default Reviews;\n","import styled from '@emotion/styled'\nimport { NavLink } from 'react-router-dom';\nimport {BiArrowBack} from \"react-icons/bi\"; \n\n\n\nexport const Btn = styled.button`\ndisplay: block;\nmargin-bottom:16px;\nborder: none;\npadding: 10px;\nbackground-color: transparent;\n`;\n\nexport const BtnLink = styled(NavLink)`\ntext-decoration: none;\nfont-size: 16px;\nfont-weight: 500;\ncolor:black;\n`;\n\nexport const Arrow = styled(BiArrowBack)`\nwidth:20px;\n`;\n\nexport const MovieList = styled.ul`\ndisplay: flex;\nlist-style: none;\nmargin: 0;\npadding: 0;\n`;\n\nexport const MovieListItem = styled.li`\nmargin-right: 40px;\n`;","import { getMovieDetails } from 'apiServises';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useParams, NavLink } from 'react-router-dom';\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\nimport { Outlet } from 'react-router-dom';\nimport {\n    Arrow,\n    MovieList,\n    BtnLink,\n    Btn,\n    MovieListItem,\n} from './MovieDetails.styled';\nimport { toast } from 'react-toastify';\n\nconst MovieDetails = () => {\n    const { movieId } = useParams();\n\n    const location = useLocation();\n\n    const backLinkHref =\n        location.state?.from ??\n        location.state?.location.state.from ??\n        location.state?.location.state.location.state.from ??\n        '/movies';\n\n    const [movie, setMovie] = useState(null);\n\n    useEffect(() => {\n        if (movieId === null) {\n            return;\n        } else {\n            getMovieDetails(movieId)\n                .then(data => {\n                    if (data.data.length === 0) {\n                        toast.warn('Нажаль нічого не знайдено', {\n                            autoclose: 3000,\n                            theme: 'colored',\n                        });\n                        return;\n                    }\n                    setMovie(movie => (movie = data.data));\n                })\n                .catch(({ message }) => {\n                    message = 'Щось пішло не так. Спробуйте ще раз';\n                    return toast.error(message);\n                });\n        }\n    }, [movieId]);\n\n    const startImage = 'https://image.tmdb.org/t/p/w300/';\n\n    const getUserScoreFromMovie = () => {\n        if (movie !== null) {\n            const userScore = Math.round(movie.vote_average * 10);\n            return userScore;\n        }\n    };\n\n    const getGenresFromMovie = () => {\n        if (movie !== null) {\n            const genresNames = movie.genres.map(genre => genre.name);\n            return genresNames.join('  ');\n        }\n    };\n\n    const getReleaseDate = date => {\n        const newDate = date.slice(0, 4);\n        return newDate;\n    };\n\n    return (\n        <div>\n            <Btn>\n                <Arrow />\n                <BtnLink to={backLinkHref}>Go back</BtnLink>\n            </Btn>\n\n            {movie && (\n                <MovieList>\n                    <MovieListItem>\n                        <img src={startImage + movie.poster_path} alt=\"\" />\n                    </MovieListItem>\n                    <MovieListItem>\n                        <h2>\n                            {movie.original_title} (\n                            {getReleaseDate(movie.release_date)})\n                        </h2>\n                        <p>User score:{getUserScoreFromMovie()}%</p>\n                        <h2>Overview</h2>\n                        <p>{movie.overview}</p>\n                        <h2>Genres</h2>\n                        <p> {getGenresFromMovie()}</p>\n                    </MovieListItem>\n                </MovieList>\n            )}\n            <h3>Aditional information</h3>\n            <ul>\n                <li>\n                    <NavLink to=\"cast\" state={{ location }} element={<Cast />}>\n                        <h3>Cast</h3>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink\n                        to=\"reviews\"\n                        state={{ location }}\n                        element={<Reviews />}\n                    >\n                        <h3>Reviews</h3>\n                    </NavLink>\n                </li>\n            </ul>\n            <Outlet />\n        </div>\n    );\n};\n\nexport default MovieDetails;\n"],"names":["getTrend","axios","params","language","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","getReviews","useState","items","setItems","useParams","useEffect","then","data","getCleanItems","cast","getUserPhoto","userPhoto","photo","photo_not","map","profile_path","array","filter","id","includes","character","original_name","src","alt","width","results","length","item","author","content","Btn","styled","BtnLink","NavLink","Arrow","BiArrowBack","MovieList","MovieListItem","location","useLocation","backLinkHref","state","from","movie","setMovie","toast","autoclose","theme","catch","message","date","to","poster_path","original_title","release_date","slice","Math","round","vote_average","getUserScoreFromMovie","overview","genres","genre","name","join","getGenresFromMovie","element","Cast","Reviews"],"sourceRoot":""}