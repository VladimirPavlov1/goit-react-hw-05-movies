{"version":3,"file":"static/js/310.d8db84b1.chunk.js","mappings":"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","sources":["apiServises.js","components/Cast/Cast.jsx","components/MovieList/MovieList.jsx","components/Reviews/Reviews.jsx","pages/MovieDetails/MovieDetails.styled.js","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport  async function getTrend(){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getMovieDetails(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data\n};\n\nexport async function getMovieByName(movieName){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getCast(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.cast\n};\n\nexport async function getReviews(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.results\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'apiServises';\nimport photo_not from '../../image/user_not_found.jpg';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const castMovies = async () => {\n            try {\n                const data = await getCast(movieId);\n                setItems(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        castMovies();\n    }, [movieId]);\n\n    const getUserPhoto = userPhoto => {\n        let photo = photo_not;\n        items.map(({ profile_path }) => {\n            if (profile_path !== null && profile_path === userPhoto) {\n                photo = `https://image.tmdb.org/t/p/original${profile_path}`;\n            }\n            return photo;\n        });\n        return photo;\n    };\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {error && <p>ойоййой, що робиться</p>}\n            <ul>\n                {items &&\n                    items.map(\n                        ({\n                            character,\n                            cast_id,\n                            original_name,\n                            profile_path,\n                        }) => {\n                            return (\n                                <li key={cast_id}>\n                                    <img\n                                        src={getUserPhoto(profile_path)}\n                                        alt=\"jdghh\"\n                                        width=\"100px\"\n                                    />\n                                    <h3>{original_name}</h3>\n                                    <h3>{character}</h3>\n                                </li>\n                            );\n                        }\n                    )}\n            </ul>\n        </>\n    );\n};\n\nexport default Cast;\n","import { NavLink } from 'react-router-dom';\nimport MovieDetails from 'pages/MovieDetails/MovieDetails';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ items }) => {\n    const location = useLocation();\n\n    return (\n        <div>\n            <ul>\n                {items.map(({ id, title, name }) => {\n                    return (\n                        <li key={id}>\n                            <NavLink\n                                to={`/movies/${id}`}\n                                state={{ from: location }}\n                                element={<MovieDetails />}\n                            >\n                                {title || name}\n                            </NavLink>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            original_title: PropTypes.string,\n        })\n    ),\n};\n","import { getReviews } from 'apiServises';\nimport { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Loader } from 'components/Loader/Loader';\n\n\n\nconst Reviews = () => {\n   \n\n    const [items, setItems] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n    const { movieId } = useParams();\n\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        const movieReviews = async () => {\n            try {\n                const data = await getReviews(movieId);\n                setItems(data);\n            } catch (error) {\n                setError(error.message);\n            }\n            finally{\n                setIsLoading(false)\n            }\n        };\n        movieReviews();\n    }, [movieId]);\n\n    return (\n        <div>\n            {isLoading && <Loader />}\n            {error && <p>ойоййой, що робиться</p>}\n            {items && (\n                <ul>\n                    {items.length > 0 ? (\n                        items.map(item => {\n                            return (\n                                <li key={item.id}>\n                                    <h3>Author:{item.author}</h3>\n                                    <p>{item.content}</p>\n                                </li>\n                            );\n                        })\n                    ) : (\n                        <h3>Not reviews</h3>\n                    )}\n                </ul>\n            )}\n        </div>\n    );\n};\n\nexport default Reviews;\n","import styled from '@emotion/styled'\nimport { NavLink } from 'react-router-dom';\nimport {BiArrowBack} from \"react-icons/bi\"; \n\n\n\nexport const Btn = styled.button`\ndisplay: block;\nmargin-bottom:16px;\nborder: none;\npadding: 10px;\nbackground-color: transparent;\n`;\n\nexport const BtnLink = styled(NavLink)`\ntext-decoration: none;\nfont-size: 16px;\nfont-weight: 500;\ncolor:black;\n`;\n\nexport const Arrow = styled(BiArrowBack)`\nwidth:20px;\n`;\n\n","import styled from '@emotion/styled'\n\nexport const MovieList = styled.ul`\ndisplay: flex;\nlist-style: none;\nmargin: 0;\npadding: 0;\n`;\n\nexport const MovieListItem = styled.li`\nmargin-right: 40px;\n`;","import { MovieList, MovieListItem } from './MovieCard.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ movie }) => {\n  \n    const startImage = 'https://image.tmdb.org/t/p/w300/';\n\n    const getUserScoreFromMovie = () => {\n        if (movie !== null) {\n            const userScore = Math.round(movie.vote_average * 10);\n            return userScore;\n        }\n    };\n\n    const getGenresFromMovie = () => {\n        if (movie !== null) {\n            const genresNames = movie.genres.map(genre => genre.name);\n            return genresNames.join('  ');\n        }\n    };\n\n    const getReleaseDate = date => {\n        const newDate = date.slice(0, 4);\n        return newDate;\n    };\n\n    const { poster_path, original_title, release_date, overview } = movie;\n    return (\n        <>\n            <MovieList>\n                <MovieListItem>\n                    <img src={startImage + poster_path} alt=\"\" />\n                </MovieListItem>\n                <MovieListItem>\n                    <h2>\n                        {original_title} ({getReleaseDate(release_date)})\n                    </h2>\n                    <p>User score:{getUserScoreFromMovie()}%</p>\n                    <h2>Overview</h2>\n                    <p>{overview}</p>\n                    <h2>Genres</h2>\n                    <p> {getGenresFromMovie()}</p>\n                </MovieListItem>\n            </MovieList>\n        </>\n    );\n};\nexport default MovieCard;\n\nMovieCard.propTypes = {\n    movie: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        original_title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n    }),\n};\n","import { getMovieDetails } from 'apiServises';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useParams, NavLink } from 'react-router-dom';\nimport Cast from 'components/Cast/Cast';\nimport Reviews from 'components/Reviews/Reviews';\nimport { Outlet } from 'react-router-dom';\nimport {\n    Arrow,\n    BtnLink,\n    Btn,   \n} from './MovieDetails.styled';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const { movieId } = useParams();\n\n    const location = useLocation();\n\n    const backLinkHref = location.state?.from ?? '/';\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        const movieInfo = async () => {\n            try {\n                const data = await getMovieDetails(movieId);\n                setMovie(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        movieInfo();\n    }, [movieId]);\n\n    const notify = () => {\n        toast.warn(\"Default Notification !\");\n    }\n    \n    return (\n        <div>\n           \n            <Btn>\n                <Arrow />\n                <BtnLink to={backLinkHref}>Go back</BtnLink>\n            </Btn>\n\n            {movie && \n                <MovieCard movie={movie}/>\n            }\n            <h3>Aditional information</h3>\n            <ul>\n                <li>\n                    <NavLink to=\"cast\" state={{ from:backLinkHref }} element={<Cast />}>\n                        <h3>Cast</h3>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"reviews\"  state={{ from:backLinkHref }} element={<Reviews />}>\n                        <h3>Reviews</h3>\n                    </NavLink>\n                </li>\n            </ul>\n            {isLoading && <Loader />}\n            {error && <p>{notify}</p>}\n            <Outlet />\n        </div>\n    );\n};\n\nexport default MovieDetails;\n","import styled from '@emotion/styled'\nimport { Field } from 'formik';\n\n\nexport const Input = styled(Field)`\n    width: 300px;\n    height: 24px;\n`;\n\nexport const BtnSearch = styled.button`\n\nwidth:96px;\nheight: 30px;\nmargin-left: 8px;\npadding: 0;\nfont-size:16px;\nfont-weight: 700;\n:hover{\n    background-color: red;\n    color:white\n}\n`;","import { Formik, Form } from 'formik';\nimport { useState, useEffect } from 'react';\nimport { getMovieByName } from 'apiServises';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Input, BtnSearch } from './Movies.styled';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n   \n    const [items, setItems] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    \n\n   \n\n    const handleSubmit = (values, { resetForm }) => {\n        const { queryName } = values;\n        if (queryName.trim() === ''){\n             toast.warn('Введіть ваш запит', {\n                autoclose: 3000,\n                theme: 'colored',\n            });\n            return;\n        }\n        setSearchParams({name:queryName});\n     \n        resetForm(values);\n    };\n\n    useEffect(() => {\n       \n        const name = searchParams.get('name');\n        setIsLoading(true);\n        const searchMovies = async () => {\n            try {\n                \n                const data = await getMovieByName(name);\n        \n                setItems(data);\n               \n            } catch (error) {\n                \n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        searchMovies();\n         \n    }, [searchParams]);\n\n    return (\n        <div>\n            <Formik initialValues={{ queryName: '' }} onSubmit={handleSubmit}>\n                <Form>\n                    <Input name=\"queryName\" />\n                    <BtnSearch type=\"submit\">Пошук</BtnSearch>\n                </Form>\n            </Formik>\n\n            {isLoading && <Loader />}\n            {error && <p>ойоййой, що робиться</p>}\n            {items && <MovieList items={items} />}\n        </div>\n    );\n};\n\nexport default Movies;\n"],"names":["getTrend","axios","params","language","results","data","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","cast","getReviews","useState","items","setItems","isLoading","setIsLoading","error","setError","useParams","useEffect","castMovies","message","getUserPhoto","userPhoto","photo","photo_not","map","profile_path","character","cast_id","original_name","src","alt","width","location","useLocation","id","title","name","to","state","from","element","movieReviews","length","item","author","content","Btn","styled","BtnLink","NavLink","Arrow","BiArrowBack","MovieList","MovieListItem","date","movie","poster_path","original_title","release_date","overview","slice","Math","round","vote_average","getUserScoreFromMovie","genres","genre","join","getGenresFromMovie","setMovie","backLinkHref","movieInfo","Cast","Reviews","Loader","toast","Input","Field","BtnSearch","useSearchParams","searchParams","setSearchParams","get","searchMovies","initialValues","queryName","onSubmit","values","resetForm","trim","autoclose","theme","type"],"sourceRoot":""}