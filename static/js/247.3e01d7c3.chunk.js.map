{"version":3,"file":"static/js/247.3e01d7c3.chunk.js","mappings":"mTAEO,SAAgBA,IAAvB,4CAAQ,OAAR,oBAAQ,oGACkBC,EAAAA,EAAAA,IAClB,yFACA,CACIC,OAAQ,CACJC,SAAU,QALlB,cACEC,EADF,yBASGA,EAAQC,KAAKD,SAThB,kEAYD,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,6CAElB,CACIL,OAAQ,CACJC,SAAU,QALnB,cACGC,EADH,yBASIA,EAAQC,MATZ,kEAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACmBR,EAAAA,EAAAA,IAClB,qFACA,CACIC,OAAQ,CACJQ,MAAOD,KALhB,cACGL,EADH,yBASIA,EAAQC,KAAKD,SATjB,kEAYA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAuBJ,GAAvB,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,sDADnB,cACGH,EADH,yBAIIA,EAAQC,KAAKO,MAJjB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BN,GAA1B,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,sDADnB,cACGH,EADH,yBAIIA,EAAQC,KAAKD,SAJjB,kE,oICyBP,UAhEa,WACT,OAA0BU,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOK,EAAP,KAAcC,EAAd,KAEQb,GAAYc,EAAAA,EAAAA,MAAZd,SAERe,EAAAA,EAAAA,YAAU,WACNJ,GAAa,GACb,IAAMK,EAAU,mCAAG,8GAEQZ,EAAAA,EAAAA,IAAQJ,GAFhB,OAELF,EAFK,OAGXW,EAASX,GAHE,gDAKXe,EAAS,KAAMI,SALJ,yBAOXN,GAAa,GAPF,4EAAH,qDAUhBK,GACH,GAAE,CAAChB,IAEJ,IAAMkB,EAAe,SAAAC,GACjB,IAAIC,EAAQC,EAOZ,OANAb,EAAMc,KAAI,YAAuB,IAApBC,EAAmB,EAAnBA,aAIT,OAHqB,OAAjBA,GAAyBA,IAAiBJ,IAC1CC,EAAK,6CAAyCG,IAE3CH,CACV,IACMA,CACV,EAED,OACI,gCACKV,IAAa,SAAC,IAAD,IACbE,IAAS,sIACV,wBACKJ,GACGA,EAAMc,KACF,YAKO,IAJHE,EAIE,EAJFA,UACAC,EAGE,EAHFA,QACAC,EAEE,EAFFA,cACAH,EACE,EADFA,aAEA,OACI,2BACI,gBACII,IAAKT,EAAaK,GAClBK,IAAI,QACJC,MAAM,WAEV,wBAAKH,KACL,wBAAKF,MAPAC,EAUhB,QAKxB,C","sources":["apiServises.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport  async function getTrend(){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getMovieDetails(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data\n};\n\nexport async function getMovieByName(movieName){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getCast(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.cast\n};\n\nexport async function getReviews(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.results\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'apiServises';\nimport photo_not from '../../image/user_not_found.jpg';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        setIsLoading(true);\n        const castMovies = async () => {\n            try {\n                const data = await getCast(movieId);\n                setItems(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        castMovies();\n    }, [movieId]);\n\n    const getUserPhoto = userPhoto => {\n        let photo = photo_not;\n        items.map(({ profile_path }) => {\n            if (profile_path !== null && profile_path === userPhoto) {\n                photo = `https://image.tmdb.org/t/p/original${profile_path}`;\n            }\n            return photo;\n        });\n        return photo;\n    };\n\n    return (\n        <>\n            {isLoading && <Loader />}\n            {error && <p>ойоййой, що робиться</p>}\n            <ul>\n                {items &&\n                    items.map(\n                        ({\n                            character,\n                            cast_id,\n                            original_name,\n                            profile_path,\n                        }) => {\n                            return (\n                                <li key={cast_id}>\n                                    <img\n                                        src={getUserPhoto(profile_path)}\n                                        alt=\"jdghh\"\n                                        width=\"100px\"\n                                    />\n                                    <h3>{original_name}</h3>\n                                    <h3>{character}</h3>\n                                </li>\n                            );\n                        }\n                    )}\n            </ul>\n        </>\n    );\n};\n\nexport default Cast;\n"],"names":["getTrend","axios","params","language","results","data","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","cast","getReviews","useState","items","setItems","isLoading","setIsLoading","error","setError","useParams","useEffect","castMovies","message","getUserPhoto","userPhoto","photo","photo_not","map","profile_path","character","cast_id","original_name","src","alt","width"],"sourceRoot":""}