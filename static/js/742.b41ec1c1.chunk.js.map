{"version":3,"file":"static/js/742.b41ec1c1.chunk.js","mappings":"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","sources":["apiServises.js","pages/MovieDetails/MovieDetails.styled.js","components/MovieCard/MovieCard.styled.js","components/MovieCard/MovieCard.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport  async function getTrend(){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getMovieDetails(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data\n};\n\nexport async function getMovieByName(movieName){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getCast(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.cast\n};\n\nexport async function getReviews(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.results\n};\n","import styled from '@emotion/styled'\nimport { NavLink } from 'react-router-dom';\nimport {BiArrowBack} from \"react-icons/bi\"; \n\n\n\nexport const Btn = styled.button`\ndisplay: block;\nmargin-bottom:16px;\nborder: none;\npadding: 10px;\nbackground-color: transparent;\n`;\n\nexport const BtnLink = styled(NavLink)`\ntext-decoration: none;\nfont-size: 16px;\nfont-weight: 500;\ncolor:black;\n`;\n\nexport const Arrow = styled(BiArrowBack)`\nwidth:20px;\n`;\n\n","import styled from '@emotion/styled'\n\nexport const MovieList = styled.ul`\ndisplay: flex;\nlist-style: none;\nmargin: 0;\npadding: 0;\n`;\n\nexport const MovieListItem = styled.li`\nmargin-right: 40px;\n`;","import { MovieList, MovieListItem } from './MovieCard.styled';\nimport PropTypes from 'prop-types';\n\nconst MovieCard = ({ movie }) => {\n  \n    const startImage = 'https://image.tmdb.org/t/p/w300/';\n\n    const getUserScoreFromMovie = () => {\n        if (movie !== null) {\n            const userScore = Math.round(movie.vote_average * 10);\n            return userScore;\n        }\n    };\n\n    const getGenresFromMovie = () => {\n        if (movie !== null) {\n            const genresNames = movie.genres.map(genre => genre.name);\n            return genresNames.join('  ');\n        }\n    };\n\n    const getReleaseDate = date => {\n        const newDate = date.slice(0, 4);\n        return newDate;\n    };\n\n    const { poster_path, original_title, release_date, overview } = movie;\n    return (\n        <>\n            <MovieList>\n                <MovieListItem>\n                    <img src={startImage + poster_path} alt=\"\" />\n                </MovieListItem>\n                <MovieListItem>\n                    <h2>\n                        {original_title} ({getReleaseDate(release_date)})\n                    </h2>\n                    <p>User score:{getUserScoreFromMovie()}%</p>\n                    <h2>Overview</h2>\n                    <p>{overview}</p>\n                    <h2>Genres</h2>\n                    <p> {getGenresFromMovie()}</p>\n                </MovieListItem>\n            </MovieList>\n        </>\n    );\n};\nexport default MovieCard;\n\nMovieCard.propTypes = {\n    movie: PropTypes.shape({\n        poster_path: PropTypes.string.isRequired,\n        original_title: PropTypes.string.isRequired,\n        release_date: PropTypes.string.isRequired,\n        overview: PropTypes.string.isRequired,\n    }),\n};\n","import { getMovieDetails } from 'apiServises';\nimport { useState, useEffect } from 'react';\nimport { useLocation, useParams, NavLink } from 'react-router-dom';\nimport { Outlet } from 'react-router-dom';\nimport {\n    Arrow,\n    BtnLink,\n    Btn,   \n} from './MovieDetails.styled';\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport MovieCard from 'components/MovieCard/MovieCard';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n    const [movie, setMovie] = useState(null);\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    const { movieId } = useParams();\n\n    const location = useLocation();\n\n    const backLinkHref = location.state?.from ?? '/';\n\n    useEffect(() => {\n        setIsLoading(true);\n\n        const movieInfo = async () => {\n            try {\n                const data = await getMovieDetails(movieId);\n                setMovie(data);\n            } catch (error) {\n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n        movieInfo();\n    }, [movieId]);\n\n    const notify = () => {\n        toast.warn(\"Default Notification !\");\n    }\n    \n    return (\n        <div>\n           \n            <Btn>\n                <Arrow />\n                <BtnLink to={backLinkHref}>Go back</BtnLink>\n            </Btn>\n\n            {movie && \n                <MovieCard movie={movie}/>\n            }\n            <h3>Aditional information</h3>\n            <ul>\n                <li>\n                    <NavLink to=\"cast\" state={{ from:backLinkHref }} >\n                        <h3>Cast</h3>\n                    </NavLink>\n                </li>\n                <li>\n                    <NavLink to=\"reviews\"  state={{ from:backLinkHref }} >\n                        <h3>Reviews</h3>\n                    </NavLink>\n                </li>\n            </ul>\n            {isLoading && <Loader />}\n            {error && <p>{notify}</p>}\n            <Outlet />\n        </div>\n    );\n};\n\nexport default MovieDetails;\n"],"names":["getTrend","axios","params","language","results","data","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","cast","getReviews","Btn","styled","BtnLink","NavLink","Arrow","BiArrowBack","MovieList","MovieListItem","date","movie","poster_path","original_title","release_date","overview","src","alt","slice","Math","round","vote_average","getUserScoreFromMovie","genres","map","genre","name","join","getGenresFromMovie","useState","setMovie","isLoading","setIsLoading","error","setError","useParams","backLinkHref","useLocation","state","from","useEffect","movieInfo","message","to","Loader","toast"],"sourceRoot":""}