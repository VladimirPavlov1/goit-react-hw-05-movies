{"version":3,"file":"static/js/310.43be9a91.chunk.js","mappings":"mTAEO,SAAgBA,IAAvB,4CAAQ,OAAR,oBAAQ,oGACkBC,EAAAA,EAAAA,IAClB,yFACA,CACIC,OAAQ,CACJC,SAAU,QALlB,cACEC,EADF,yBASGA,EAAQC,KAAKD,SAThB,kEAYD,SAAeE,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,6CAElB,CACIL,OAAQ,CACJC,SAAU,QALnB,cACGC,EADH,yBASIA,EAAQC,MATZ,kEAYA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAA8BC,GAA9B,uFACmBR,EAAAA,EAAAA,IAClB,qFACA,CACIC,OAAQ,CACJQ,MAAOD,KALhB,cACGL,EADH,yBASIA,EAAQC,KAAKD,SATjB,kEAYA,SAAeO,EAAtB,+CAAO,OAAP,oBAAO,WAAuBJ,GAAvB,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,sDADnB,cACGH,EADH,yBAIIA,EAAQC,KAAKO,MAJjB,kEAOA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BN,GAA1B,uFACmBN,EAAAA,EAAAA,IAAA,6CACoBM,EADpB,sDADnB,cACGH,EADH,yBAIIA,EAAQC,KAAKD,SAJjB,kE,wDCjBP,IAxBkB,SAAC,GAAe,IAAbU,EAAY,EAAZA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,0BACI,wBACKF,EAAMG,KAAI,YAA0B,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACrB,OACI,yBACI,SAAC,KAAD,CACIC,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMR,GAFnB,SAKKI,GAASC,KANTF,EAUhB,OAIhB,C,kMCtBYM,GAAQC,EAAAA,EAAAA,GAAOC,EAAAA,GAAPD,CAAH,8DAKLE,EAAYF,EAAAA,EAAAA,OAAH,mL,6BCiEtB,EAhEe,WAEX,OAA0BG,EAAAA,EAAAA,UAAS,IAAnC,eAAOd,EAAP,KAAce,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCJ,EAAAA,EAAAA,WAAS,GAA3C,eAAOK,EAAP,KAAkBC,EAAlB,KACA,GAA0BN,EAAAA,EAAAA,UAAS,IAAnC,eAAOO,EAAP,KAAcC,EAAd,KA2CA,OAvBAC,EAAAA,EAAAA,YAAU,WAEN,IAAMjB,EAAOW,EAAaO,IAAI,QAC9BJ,GAAa,GACb,IAAMK,EAAY,mCAAG,8GAGM/B,EAAAA,EAAAA,IAAeY,GAHrB,OAGPf,EAHO,OAKbwB,EAASxB,GALI,gDASb+B,EAAS,KAAMI,SATF,yBAWbN,GAAa,GAXA,4EAAH,qDAelBK,GAEH,GAAE,CAACR,KAGA,4BACI,SAAC,KAAD,CAAQU,cAAe,CAAEC,UAAW,IAAMC,SAvC7B,SAACC,EAAD,GAA4B,IAAjBC,EAAgB,EAAhBA,UACpBH,EAAcE,EAAdF,UACiB,KAArBA,EAAUI,QAOdd,EAAgB,CAACZ,KAAKsB,IAEtBG,EAAUD,IARLG,EAAAA,GAAAA,KAAW,+FAAqB,CAC7BC,UAAW,IACXC,MAAO,WAOlB,EA2BO,UACI,UAAC,KAAD,YACI,SAACzB,EAAD,CAAOJ,KAAK,eACZ,SAACO,EAAD,CAAWuB,KAAK,SAAhB,iDAIPjB,IAAa,SAACkB,EAAA,EAAD,IACbhB,IAAS,qIACTrB,IAAS,SAACsC,EAAA,EAAD,CAAWtC,MAAOA,MAGvC,C","sources":["apiServises.js","components/MovieList/MovieList.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport  async function getTrend(){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getMovieDetails(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n    return results.data\n};\n\nexport async function getMovieByName(movieName){\n    const results = await axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n    return results.data.results\n};\n\nexport async function getCast(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.cast\n};\n\nexport async function getReviews(movieId){\n    const results = await axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n    return results.data.results\n};\n","import { NavLink } from 'react-router-dom';\nimport { useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\n\nconst MovieList = ({ items }) => {\n    const location = useLocation();\n\n    return (\n        <div>\n            <ul>\n                {items.map(({ id, title, name }) => {\n                    return (\n                        <li key={id}>\n                            <NavLink\n                                to={`/movies/${id}`}\n                                state={{ from: location }}\n                               \n                            >\n                                {title || name}\n                            </NavLink>\n                        </li>\n                    );\n                })}\n            </ul>\n        </div>\n    );\n};\n\nexport default MovieList;\n\nMovieList.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string,\n            name:PropTypes.string.isRequired\n        })\n    ),\n};\n","import styled from '@emotion/styled'\nimport { Field } from 'formik';\n\n\nexport const Input = styled(Field)`\n    width: 300px;\n    height: 24px;\n`;\n\nexport const BtnSearch = styled.button`\n\nwidth:96px;\nheight: 30px;\nmargin-left: 8px;\npadding: 0;\nfont-size:16px;\nfont-weight: 700;\n:hover{\n    background-color: red;\n    color:white\n}\n`;","import { Formik, Form } from 'formik';\nimport { useState, useEffect } from 'react';\nimport { getMovieByName } from 'apiServises';\nimport MovieList from 'components/MovieList/MovieList';\nimport { useSearchParams } from 'react-router-dom';\nimport { toast } from 'react-toastify';\nimport { Input, BtnSearch } from './Movies.styled';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { Loader } from 'components/Loader/Loader';\n\nconst Movies = () => {\n   \n    const [items, setItems] = useState([]);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const [isLoading, setIsLoading] = useState(false);\n    const [error, setError] = useState('');\n\n    \n\n   \n\n    const handleSubmit = (values, { resetForm }) => {\n        const { queryName } = values;\n        if (queryName.trim() === ''){\n             toast.warn('Введіть ваш запит', {\n                autoclose: 3000,\n                theme: 'colored',\n            });\n            return;\n        }\n        setSearchParams({name:queryName});\n     \n        resetForm(values);\n    };\n\n    useEffect(() => {\n       \n        const name = searchParams.get('name');\n        setIsLoading(true);\n        const searchMovies = async () => {\n            try {\n                \n                const data = await getMovieByName(name);\n        \n                setItems(data);\n               \n            } catch (error) {\n                \n                setError(error.message);\n            } finally {\n                setIsLoading(false);\n            }\n        };\n\n        searchMovies();\n         \n    }, [searchParams]);\n\n    return (\n        <div>\n            <Formik initialValues={{ queryName: '' }} onSubmit={handleSubmit}>\n                <Form>\n                    <Input name=\"queryName\" />\n                    <BtnSearch type=\"submit\">Пошук</BtnSearch>\n                </Form>\n            </Formik>\n\n            {isLoading && <Loader />}\n            {error && <p>ойоййой, що робиться</p>}\n            {items && <MovieList items={items} />}\n        </div>\n    );\n};\n\nexport default Movies;\n"],"names":["getTrend","axios","params","language","results","data","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","cast","getReviews","items","location","useLocation","map","id","title","name","to","state","from","Input","styled","Field","BtnSearch","useState","setItems","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","error","setError","useEffect","get","searchMovies","message","initialValues","queryName","onSubmit","values","resetForm","trim","toast","autoclose","theme","type","Loader","MovieList"],"sourceRoot":""}