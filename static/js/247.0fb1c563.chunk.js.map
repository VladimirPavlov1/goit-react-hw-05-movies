{"version":3,"file":"static/js/247.0fb1c563.chunk.js","mappings":"sRAEaA,EAAW,WACpB,OAAOC,EAAAA,EAAAA,IACH,yFACA,CACIC,OAAQ,CACJC,SAAU,OAIzB,EAEYC,EAAkB,SAAAC,GAC3B,OAAOJ,EAAAA,EAAAA,IAAA,6CACmCI,EADnC,6CAEH,CACIH,OAAQ,CACJC,SAAU,OAIzB,EAEYG,EAAiB,SAAAC,GAC1B,OAAON,EAAAA,EAAAA,IACH,qFACA,CACIC,OAAQ,CACJM,MAAOD,IAItB,EAEYE,EAAU,SAAAJ,GACnB,OAAOJ,EAAAA,EAAAA,IAAA,6CACmCI,EADnC,qDAGV,EAEYK,EAAa,SAAAL,GACtB,OAAOJ,EAAAA,EAAAA,IAAA,6CACmCI,EADnC,qDAGV,C,uGCQD,UAhDa,WACT,OAA0BM,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAEQR,GAAYS,EAAAA,EAAAA,MAAZT,SAERU,EAAAA,EAAAA,YAAU,WACU,OAAZV,IACAI,EAAAA,EAAAA,IAAQJ,GAASW,MAAK,SAAAC,GAClBJ,GAAS,SAAAD,GAAK,cAAQM,EAAcD,EAAKA,KAAKE,MAAhC,GACjB,GAER,GAAE,CAACd,IAEJ,IAAMe,EAAe,SAAAC,GACjB,IAAIC,EAAQC,EAOZ,OANAX,EAAMY,KAAI,YAAuB,IAApBC,EAAmB,EAAnBA,aAIT,OAHqB,OAAjBA,GAAyBA,IAAiBJ,IAC1CC,EAAK,6CAAyCG,IAE3CH,CACV,IACMA,CACV,EAEKJ,EAAgB,SAAAQ,GAClB,OAAOA,EAAMC,QAAO,gBAAGC,EAAH,EAAGA,GAAH,OAAYA,EAAGC,SAASD,EAAxB,GACvB,EAED,OACI,wBACKhB,GACGA,EAAMY,KAAI,YAAqD,IAAlDM,EAAiD,EAAjDA,UAAWF,EAAsC,EAAtCA,GAAIG,EAAkC,EAAlCA,cAAeN,EAAmB,EAAnBA,aACvC,OACI,2BACI,gBACIO,IAAKZ,EAAaK,GAClBQ,IAAI,QACJC,MAAM,WAEV,wBAAKH,KACL,wBAAKD,MAPA,CAACA,EAAWF,GAU5B,KAGhB,C","sources":["apiServises.js","components/Cast/Cast.jsx"],"sourcesContent":["import axios from 'axios';\n\nexport const getTrend = () => {\n    return axios.get(\n        'https://api.themoviedb.org/3/trending/all/day?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n};\n\nexport const getMovieDetails = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}?api_key=27cddf1230eab22bdf20f54c99a70037`,\n        {\n            params: {\n                language: 'ua',\n            },\n        }\n    );\n};\n\nexport const getMovieByName = movieName => {\n    return axios.get(\n        'https://api.themoviedb.org/3/search/movie?api_key=27cddf1230eab22bdf20f54c99a70037',\n        {\n            params: {\n                query: movieName,\n            },\n        }\n    );\n};\n\nexport const getCast = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n};\n\nexport const getReviews = movieId => {\n    return axios.get(\n        `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=27cddf1230eab22bdf20f54c99a70037`\n    );\n};\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getCast } from 'apiServises';\nimport photo_not from '../../image/user_not_found.jpg';\n\nconst Cast = () => {\n    const [items, setItems] = useState([]);\n\n    const { movieId } = useParams();\n\n    useEffect(() => {\n        if (movieId !== null) {\n            getCast(movieId).then(data => {\n                setItems(items => [...getCleanItems(data.data.cast)]);\n            });\n        }\n    }, [movieId]);\n\n    const getUserPhoto = userPhoto => {\n        let photo = photo_not;\n        items.map(({ profile_path }) => {\n            if (profile_path !== null && profile_path === userPhoto) {\n                photo = `https://image.tmdb.org/t/p/original${profile_path}`;\n            }\n            return photo;\n        });\n        return photo;\n    };\n\n    const getCleanItems = array => {\n        return array.filter(({ id }) => id.includes(id));\n    };\n\n    return (\n        <ul>\n            {items &&\n                items.map(({ character, id, original_name, profile_path }) => {\n                    return (\n                        <li key={[character, id]}>\n                            <img\n                                src={getUserPhoto(profile_path)}\n                                alt=\"jdghh\"\n                                width=\"100px\"\n                            />\n                            <h3>{original_name}</h3>\n                            <h3>{character}</h3>\n                        </li>\n                    );\n                })}\n        </ul>\n    );\n};\n\nexport default Cast;\n"],"names":["getTrend","axios","params","language","getMovieDetails","movieId","getMovieByName","movieName","query","getCast","getReviews","useState","items","setItems","useParams","useEffect","then","data","getCleanItems","cast","getUserPhoto","userPhoto","photo","photo_not","map","profile_path","array","filter","id","includes","character","original_name","src","alt","width"],"sourceRoot":""}